import streamlit as st
import requests
import io
import base64
from modules import feedback # Import module feedback
from modules import diagnose
# Removed unused imports: from datetime import datetime, import os

def save_true(username, img_str, disease_response, torf):
    feedback.save_feedback(username, img_str, disease_response, torf)
    st.success("üéâ C·∫£m ∆°n b·∫°n ƒë√£ ph·∫£n h·ªìi!")

def save_false(username, img_str, disease_response, torf):
    feedback.save_feedback(username, img_str, disease_response, torf)
    st.success("üéâ C·∫£m ∆°n b·∫°n ƒë√£ ph·∫£n h·ªìi!")


def show_home(username):
    from PIL import Image

    # C·∫•u h√¨nh giao di·ªán Streamlit
    st.markdown("üì± B·∫°n c√≥ th·ªÉ ch·ª•p **m·ªôt** b·ª©c ·∫£nh ho·∫∑c t·∫£i l√™n **m·ªôt** h√¨nh ·∫£nh c·ªßa chi·∫øc l√° tr√™n c√¢y tr·ªìng b·∫°n mu·ªën ki·ªÉm tra b·∫±ng c√°ch b·∫•m v√†o n√∫t **Browse files**, r·ªìi ch·ªçn h√¨nh ·∫£nh b·∫°n mu·ªën t·∫£i l√™n")
    st.markdown("Sau ƒë√≥ t√™n ch·ªßng lo√†i c√¢y v√† c√°c lo·∫°i b·ªánh ƒë∆∞·ª£c d·ª± ƒëo√°n c√πng x√°c su·∫•t ch√≠nh x√°c c·ªßa ch√∫ng s·∫Ω ƒë∆∞·ª£c **xu·∫•t hi·ªán tr√™n m√†n h√¨nh**, ch√∫ √Ω nh√©!!")

    # Upload ·∫£nh
    uploaded_file = st.file_uploader("üì§ Upload leaf image", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")
        st.image(image, caption="üñºÔ∏è Uploaded Leaf Image", use_container_width=True)

        if st.button("üîç D·ª± ƒëo√°n b·ªánh"):
            # Chuy·ªÉn ·∫£nh sang d·∫°ng base64
            buffered = io.BytesIO()
            image.save(buffered, format="JPEG")
            img_str = base64.b64encode(buffered.getvalue()).decode()

            # ---------- STEP 1: Ph√¢n lo·∫°i lo·∫°i c√¢y ----------
            st.subheader("üß¨ Nh·∫≠n di·ªán lo·∫°i l√° c√¢y...")
            # üëâ THAY b·∫±ng workflow ƒë√∫ng v√† API KEY ƒë√∫ng n·∫øu c·∫ßn
            leaf_type_url = "https://serverless.roboflow.com/infer/workflows/i30/leaf-type"  
            leaf_type_key = "Sq8AwQQ64AZEGfvmjn03"  

            leaf_payload = {
                "api_key": leaf_type_key,
                "inputs": {
                    "image": {
                        "type": "base64",
                        "value": img_str
                    }
                }
            }

            leaf_response_raw = requests.post(leaf_type_url, json=leaf_payload)
            leaf_result = leaf_response_raw.json()
            
            try:
                # L·∫•y d·ªØ li·ªáu t·ª´ c·∫•u tr√∫c JSON c·ªßa Roboflow Workflow
                # ƒê·∫£m b·∫£o an to√†n khi truy c·∫≠p c√°c kh√≥a l·ªìng nhau
                prediction_data = leaf_result.get('outputs', [{}])[0].get('predictions', {})
                prediction_list = prediction_data.get('predictions', [])

                if not prediction_list:
                    st.error("‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i c√¢y. H√£y th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ h∆°n.")
                    st.stop()

                # L·∫•y class c√≥ ƒë·ªô tin c·∫≠y cao nh·∫•t
                top_class_pred = sorted(prediction_list, key=lambda x: x['confidence'], reverse=True)[0]
                top_class = top_class_pred['class']
                leaf_type = top_class.split("_")[0]  # v√≠ d·ª•: 'coffee_leaf_healthy' -> 'coffee'

                st.success(f"üìó Lo·∫°i l√°: **{leaf_type.upper()}**")

            except Exception as e:
                st.error("‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i c√¢y. H√£y th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ h∆°n ho·∫∑c ki·ªÉm tra API key/URL.")
                st.exception(e) # Hi·ªÉn th·ªã chi ti·∫øt l·ªói ƒë·ªÉ debug
                st.stop()

            # ---------- STEP 2: D·ª± ƒëo√°n b·ªánh theo lo·∫°i c√¢y ----------
            st.subheader("ü¶† Ph√°t hi·ªán b·ªánh...")

            # C·∫•u h√¨nh API cho t·ª´ng lo·∫°i c√¢y
            api_config = {
                "durian": {
                    "url": "https://serverless.roboflow.com/infer/workflows/i30/durian-deseases-detection",
                    "key": "Sq8AwQQ64AZEGfvmjn03"
                },
                "lemon": {
                    "url": "https://serverless.roboflow.com/infer/workflows/i30/lemon-deseases-detection",
                    "key": "Sq8AwQQ64AZEGfvmjn03"
                },
                "coffee": {
                    "url": "https://serverless.roboflow.com/infer/workflows/i30/coffee-deseases-detection",
                    "key": "Sq8AwQQ64AZEGfvmjn03"
                }
            }
            
            if leaf_type not in api_config:
                st.error(f"‚ùå Ch∆∞a h·ªó tr·ª£ b·ªánh cho lo·∫°i c√¢y: **{leaf_type.upper()}**")
                st.stop()

            disease_payload = {
                "api_key": api_config[leaf_type]['key'],
                "inputs": {
                    "image": {
                        "type": "base64",
                        "value": img_str
                    }
                }
            }

            disease_response_raw = requests.post(api_config[leaf_type]['url'], json=disease_payload)
            disease_response = disease_response_raw.json()
            
            try:
                # L·∫•y d·ªØ li·ªáu t·ª´ c·∫•u tr√∫c JSON c·ªßa Roboflow Workflow
                # ƒê·∫£m b·∫£o an to√†n khi truy c·∫≠p c√°c kh√≥a l·ªìng nhau
                preds = disease_response.get('outputs', [{}])[0].get('predictions', {}).get('predictions', [])
                
                if preds:
                    st.subheader("üìå C√°c b·ªánh ƒë∆∞·ª£c ph√°t hi·ªán tr√™n l√°:")
                    # Hi·ªÉn th·ªã t·ª´ng b·ªánh v√† ƒë·ªô tin c·∫≠y
                    for pred in preds:
                        disease_class = pred['class']
                        confidence = pred['confidence']
                        st.markdown(f"‚úÖ **{disease_class}** ({confidence*100:.2f}%)")
                        diagnose.show_disease_info(disease_class)
                    st.markdown("---") # ƒê∆∞·ªùng k·∫ª ph√¢n c√°ch
                    st.subheader("‚ùì K·∫øt qu·∫£ c√≥ ch√≠nh x√°c kh√¥ng?")
                    
                    # N√∫t ph·∫£n h·ªìi cho tr∆∞·ªùng h·ª£p c√≥ b·ªánh
                    
                else:
                    st.info("‚ÑπÔ∏è Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c b·ªánh tr√™n l√° n√†y.")
                    st.markdown("---")
                    st.subheader("‚ùì K·∫øt qu·∫£ c√≥ ch√≠nh x√°c kh√¥ng?")
                    # N√∫t ph·∫£n h·ªìi cho tr∆∞·ªùng h·ª£p kh√¥ng c√≥ b·ªánh
                    

            except Exception as e:
                st.error("‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ nh·∫≠n di·ªán b·ªánh. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh API.")
                st.exception(e) # Hi·ªÉn th·ªã chi ti·∫øt l·ªói ƒë·ªÉ debug


            col1, col2 = st.columns(2)
            col1.button(
                "üëç ƒê√∫ng",
                key="correct_btn",
                on_click=save_true,                              # <-- pass function, no ()
                args=(
                    st.session_state.get("username", "anon"),
                    img_str,
                    disease_response,
                    True
                )
            )

            col2.button(
                "üëé Sai (c√≥ b·ªánh)",
                key="no_disease_incorrect_btn",
                on_click=save_false,                             # <-- pass function, no ()
                args=(
                    st.session_state.get("username", "anon"),
                    img_str,
                    disease_response,
                    False
                )
            )
